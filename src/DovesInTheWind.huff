#include "huffmate/utils/JumpTableUtil.huff"
#include "huffmate/utils/Errors.huff"
#include "huffmate/utils/LibBit.huff"
#include "huffmate/math/FixedPointMath.huff"
#include "huffmate/math/Trigonometry.huff"

////////////////////////////////////////////////////////////////
//                         INTERFACES                         //
////////////////////////////////////////////////////////////////

#define function owner() view returns (address)

////////////////////////////////////////////////////////////////
//                         CONSTANTS                          //
////////////////////////////////////////////////////////////////

#define constant TWO_BYTE_MASK = 0xFFFF
#define constant RP_FOUR_BYTE_MASK = 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000
#define constant RP_EIGHT_BYTE_MASK = 0xFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000
#define constant ADDRESS_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

////////////////////////////////////////////////////////////////
//                           TABLES                           //
////////////////////////////////////////////////////////////////

#define jumptable__packed DISPATCH = {
    dispatch_0 dispatch_1 dispatch_2 dispatch_3 dispatch_4
}

////////////////////////////////////////////////////////////////
//                         CHALLENGE                          //
////////////////////////////////////////////////////////////////

#define macro MAIN() = {
    0x04 calldataload          // [cd]

    // Will revert if an invalid dispatch table index is passed as the
    // selector.
    __tablestart(DISPATCH)     // [tablestart, cd]
    0x00 calldataload 0xE0 shr // [sig, tablestart, cd]
    RETRIEVE_FROM_PACKED_JT()  // [jumpdest, cd]
    jump                       // [cd]

    // TODO: Add honeypot dispatches
    dispatch_0:
        HONEYPOT_0()
    dispatch_1:
        HONEYPOT_1()
    dispatch_2:
        HONEYPOT_2()
    dispatch_3:
        WILDCARD()
    dispatch_4:
        HONEYPOT_4()

    // This dest can only be jumped to by `WILDCARD`
    // The challenge before the challenge >:D
    magic_dest:
        [ADDRESS_MASK] and     // [solution_addr]

        SOLVE()
        stop

    fail:
        0x00 dup1 revert
}

/// @dev Offers a jump to an arbitrary destination in exchange for a brute
/// forced hash. The first part of the challenge is to find the inputs for a
/// hash that satisfies the constraints and causes this macro to jump to
/// the `SOLVE` entrypoint.
///
/// Includes the function selector, tx.origin address, and cd[4:12]
/// in the hash input.
///
/// 32 bits in total need to be brute forced:
/// - the final 2 bytes of the hash must equal D073
/// - the first 2 bytes of the hash must equal the desired jumpdest
#define macro WILDCARD() = {
    0x00 calldataload          // [cd]
    [RP_FOUR_BYTE_MASK] and    // [sig]
    0x00 mstore                // []
    origin 0x60 shl            // [origin << 0x60]
    0x04 mstore                // []
    0x04 calldataload          // [cd]
    [RP_EIGHT_BYTE_MASK] and   // [cd & 0xFFFFFFFFFFFFFFFF...]
    0x18 mstore                // []
    0x20 0x00 sha3             // [hash]
    dup1                       // [hash, hash]
    [TWO_BYTE_MASK] and        // [hash & 0xFFFF, hash]
    0xD073 eq                  // [0xD073 == (hash & 0xFFFF), hash]
    ASSERT()                   // [hash]
    0xF0 shr jump              // []
}

/// @dev Solve entrypoint 
#define macro SOLVE() = takes (1) returns (1) {
    // Input stack:               [solution_addr]

    // "Solution must be a contract"
    __RIGHTPAD(0x536f6c7574696f6e206d757374206265206120636f6e7472616374)
    0x1B                       // [0x1b, "Solution must be a contract", solution_addr]
    dup3 extcodesize           // [codesize(solution), 0x1b, "Solution must be a contract", solution_addr]
    iszero iszero              // [codesize(solution) != 0, 0x1b, "Solution must be a contract", solution_addr]
    REQUIRE()                  // [solution_addr]

    // "Solution is not yours"
    __RIGHTPAD(0x536f6c7574696f6e206973206e6f7420796f757273)
    0x15                       // [0x15, "Solution is not yours", player]
    dup3                       // [player, 0x15, "Solution is not yours", player]
    GET_OWNER() origin eq      // [player_owner == tx.origin, 0x15, "Solution is not yours", player]
    REQUIRE()                  // [player]

    // Test that we made it here.
    0x00 mstore
    0x20 0x00 return   

    // Store function selector in memory @ 0x00
    // TODO: Use a selector that is not on 4byte / eth sig DB
    // "solve(uint)" for now
    __FUNC_SIG("solve(uint256)") 0x00 mstore

    // TODO: Generate address-specific problem input & store in mem @ 0x20
    0x01 0x20 mstore           // [player]
    
    0x00 0x24 0x1c 0x00        // [0x00, 0x1c, 0x24, 0x00, player]
    0x20 swap5                 // [player, 0x00, 0x1c, 0x24, 0x00, 0x20]
    gas call                   // [success]
    
    // TODO: Measure gas consumed in call

    // TODO: Validate answer, check if answer beats previous in terms
    // of gas consumption.

    // Return stack:              []
}

/// @dev Staticcalls a contract's "owner()" function and leaves
///      the result on the stack.
#define macro GET_OWNER() = takes (1) returns (1) {
    // Input stack:               [player]

    __FUNC_SIG(owner) 0x00 mstore

    0x00 0x04 0x1c 0x20 swap4  // [player, 0x1c, 0x04, 0x00, 0x20]
    gas staticcall             // [success]

    // Revert if call failed.
    ASSERT()                   // []

    // Store result on the stack
    0x00 mload                 // [owner]

    // Return stack:              [owner]
}

/// @dev Generates a challenge specific to the player
#define macro GEN_CHALLENGE() = takes (1) returns (1) {
    // TODO
}

////////////////////////////////////////////////////////////////
//                         HONEYPOTS                          //
////////////////////////////////////////////////////////////////

/// @dev Basically a noop, random mulDivDown call with calldata as the denominator.
#define macro HONEYPOT_0() = {
    // Input stack:               [cd]

    0xa57b3d3e                 // [0xa57b3d3e, cd]
    0x957f47157a               // [0x957f47157a, 0xa57b3d3e, cd]
    MUL_DIV_DOWN(fail)         // [0x957f47157a * 0xa57b3d3e / cd]

    0x00 mstore                // []
    0x20 0x00 return
}

/// @dev Creates an infinite loop on itself, will run out of gas.
#define macro HONEYPOT_1() = {
    // Input stack:               [cd]

    0x01 0x08 shl              // [0x0100, cd]
    returndatasize add         // [0x0100 + returndatasize, cd]
    chainid and                // [(0x1000 + returndatasize) & chainid, cd]

    dispatch_1 jump            // [(0x1000 + returndatasize) & chainid, cd]

    // Unnecessary
    stop
}

/// @dev Another noop 
#define macro HONEYPOT_2() = {
    // Input stack:               [cd]

    SIN()                      // [sin(cd)]
    stop
    SQRT()
}

/// @dev Retrieves the number of set bits in calldata[4:36]
#define macro HONEYPOT_4() = {
    // Input stack:               [cd]
    POP_COUNT()

    0x00 mstore                // []
    0x20 0x00 return
}