/// @title Doves in the Wind
/// @notice Whitenoise Challenge #1
/// @author clabby <https://github.com/clabby>

#include "huffmate/utils/Errors.huff"
#include "huffmate/utils/JumpTableUtil.huff"
#include "huffmate/utils/LibBit.huff"
#include "huffmate/math/FixedPointMath.huff"
#include "huffmate/math/Trigonometry.huff"

////////////////////////////////////////////////////////////////
//                         INTERFACES                         //
////////////////////////////////////////////////////////////////

#define function owner() view returns (address)
#define function submit(address, uint256, uint256) nonpayable returns (address)
#define function solve(uint256) nonpayable returns (address)

////////////////////////////////////////////////////////////////
//                         CONSTANTS                          //
////////////////////////////////////////////////////////////////

#define constant HIGH_SCORE_SLOT = FREE_STORAGE_POINTER()
#define constant TWO_BYTE_MASK = 0xFFFF
#define constant RP_FOUR_BYTE_MASK = 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000
#define constant RP_EIGHT_BYTE_MASK = 0xFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000
#define constant ADDRESS_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

////////////////////////////////////////////////////////////////
//                           TABLES                           //
////////////////////////////////////////////////////////////////

#define jumptable__packed DISPATCH = {
    dispatch_0 dispatch_1 dispatch_2 dispatch_3 dispatch_4
}

////////////////////////////////////////////////////////////////
//                         CHALLENGE                          //
////////////////////////////////////////////////////////////////

#define macro CONSTRUCTOR() = {
    // Set the high score to max int
    pc not [HIGH_SCORE_SLOT] sstore
}

#define macro MAIN() = {
    // Do not allow other contracts to call this contract.
    caller extcodesize iszero
    ASSERT()

    0x04 calldataload          // [cd]

    // Will revert if an invalid dispatch table index is passed as the
    // selector.
    __tablestart(DISPATCH)     // [tablestart, cd]
    0x00 calldataload 0xE0 shr // [sig, tablestart, cd]
    0x05 dup2 lt ASSERT()      // [sig, tablestart, cd]
    RETRIEVE_FROM_PACKED_JT()  // [jumpdest, cd]
    jump                       // [cd]

    // DISPATCH LOGIC
    // ==============
    dispatch_0:
        HONEYPOT_0()
    dispatch_1:
        HONEYPOT_1()
    dispatch_2:
        HONEYPOT_2()
    dispatch_3:
        WILDCARD()
    dispatch_4:
        HONEYPOT_4()

    // This dest can only be jumped to by `WILDCARD`
    // The challenge before the challenge >:D
    magic_dest:
        [ADDRESS_MASK] and     // [solution_addr]
        SOLVE()

    fail:
        PANIC()
}

/// @dev Offers a jump to an arbitrary destination in exchange for a brute
/// forced hash. The first part of the challenge is to find the inputs for a
/// hash that satisfies the constraints and causes this macro to jump to
/// the `SOLVE` entrypoint.
///
/// Includes the function selector, msg.sender address, and cd[4:12]
/// in the hash input.
///
/// 32 bits in total need to be brute forced:
/// - the final 2 bytes of the hash must equal D073
/// - the first 2 bytes of the hash must equal the desired jumpdest
#define macro WILDCARD() = {
    0x00 calldataload          // [cd]
    [RP_FOUR_BYTE_MASK] and    // [sig]
    0x00 mstore                // []
    caller 0x60 shl            // [msg.sender << 0x60]
    0x04 mstore                // []
    0x04 calldataload          // [cd]
    [RP_EIGHT_BYTE_MASK] and   // [cd & 0xFFFFFFFFFFFFFFFF...]
    0x18 mstore                // []
    0x20 0x00 sha3             // [hash]
    dup1                       // [hash, hash]
    [TWO_BYTE_MASK] and        // [hash & 0xFFFF, hash]
    0xD073 eq                  // [0xD073 == (hash & 0xFFFF), hash]
    ASSERT()                   // [hash]
    0xF0 shr jump              // []
}

/// @dev Solve entrypoint
#define macro SOLVE() = takes (1) returns (1) {
    // Input stack:               [solution_addr]

    // "Solution must be a contract"
    __RIGHTPAD(0x536f6c7574696f6e206d757374206265206120636f6e7472616374)
    0x1B                       // [0x1b, "Solution must be a contract", solution_addr]
    dup3 extcodesize           // [codesize(solution), 0x1b, "Solution must be a contract", solution_addr]
    iszero iszero              // [codesize(solution) != 0, 0x1b, "Solution must be a contract", solution_addr]
    REQUIRE()                  // [solution_addr]

    // "Solution is not yours"
    __RIGHTPAD(0x536f6c7574696f6e206973206e6f7420796f757273)
    0x15                       // [0x15, "Solution is not yours", solution_addr]
    dup3                       // [solution_addr, 0x15, "Solution is not yours", solution_addr]
    GET_OWNER() caller eq      // [solution_owner == msg.sender, 0x15, "Solution is not yours", solution_addr]
    REQUIRE()                  // [solution_addr]

    // Store "solve" function selector in memory @ 0x00
    __FUNC_SIG(solve) 0x00 mstore

    GEN_SEED() dup1            // [challenge_input, challenge_input, solution_addr]
    0x20 mstore                // [challenge_input, solution_addr]
    swap1                      // [solution_addr, challenge_input]

    dup1 extcodesize           // [codesize(solution), solution_addr, challenge_input]
    swap1                      // [solution_addr, codesize(solution), challenge_input]
    gas                        // [gasBefore, solution_addr, codesize(solution), challenge_input]
    swap1                      // [solution_addr, gasBefore, codesize(solution), challenge_input]

    // Perform call to solution contract with the generated input
    0x00 0x24 0x1c 0x00        // [0x00, 0x1c, 0x24, 0x00, solution_addr, gasBefore, codesize(solution), challenge_input]
    0x20 swap5                 // [solution_addr, 0x00, 0x1c, 0x24, 0x00, 0x20, gasBefore, codesize(solution), challenge_input]
    gas call                   // [success, gasBefore, codesize(solution), challenge_input]

    // Ensure call to solution contract succeeded
    ASSERT()                   // [gasBefore, codesize(solution), challenge_input]

    // TODO: Subtract PUSH / SWAP / ASSERT gas for an accurate result.
    gas swap1 sub              // [gasUsed, codesize(solution), challenge_input]

    // Assert that solution is valid
    0x20 0x00 dup1             // [0x00, 0x00, 0x20, gasUsed, codesize(solution), challenge_input]
    returndatacopy             // [gasUsed, codesize(solution), challenge_input]
    0x00 mload                 // [solution, gasUsed, codesize(solution), challenge_input]
    dup4                       // [challenge_input, solution, gasUsed, codesize(solution), challenge_input]
    VALIDATE_SOLUTION()        // [gasUsed, codesize(solution), challenge_input]

    // Assert that the new score is less than the old score
    [HIGH_SCORE_SLOT] sload    // [prevScore, gasUsed, codesize(solution), challenge_input]
    dup3 dup3 add lt           // [newScore < prevScore, gasUsed, codesize(solution), challenge_input]
    ASSERT()                   // [gasUsed, codesize(solution), challenge_input]

    // Submit to NFT contract
    caller                     // [sender, gasUsed, codesize(solution), challenge_input]
    SUBMIT()                   // [newScore, challenge_input]

    // Update highest (erm, lowest, ykwim) score and hault
    [HIGH_SCORE_SLOT] sstore   // [challenge_input]
    stop
}

////////////////////////////////////////////////////////////////
//                       SCORE KEEPING                        //
////////////////////////////////////////////////////////////////

/// @dev Used to submit the new solution to the NFT contract
#define macro SUBMIT() = takes (1) {
    // Input stack:               [to, gasUsed, codesize(solution)]

    __FUNC_SIG(submit)
    0xE0 shl                   // [0xb57c0be4..., to, gasUsed, codesize(solution)]
    0x00 mstore                // [to, gasUsed, codesize(solution)]
    0x04 mstore                // [gasUsed, codesize(solution)]

    // Copy score onto stack for storage later
    dup2 dup2 add              // [score, gasUsed, codesize(solution)]
    swap2                      // [codesize(solution), gasUsed, score]

    0x44 mstore                // [gasUsed, score]
    0x24 mstore                // [score]

    0x00 dup1 0x64 dup2 dup1   // [0x00, 0x00, 0x64, 0x00, 0x00, score]
    [NFT_ADDR]                 // [NFT_ADDR, 0x00, 0x00, 0x64, 0x00, 0x00, score]
    gas call                   // [success, score]

    // Revert if mint failed.
    ASSERT()                   // [score]
}

////////////////////////////////////////////////////////////////
//                          HELPERS                           //
////////////////////////////////////////////////////////////////

/// @dev Staticcalls a contract's "owner()" function and leaves
///      the result on the stack. Does not check if the address
///      being called is a contract.
#define macro GET_OWNER() = takes (1) returns (1) {
    // Input stack:               [solution_addr]

    __FUNC_SIG(owner) 0x00 mstore

    0x00 0x04 0x1c 0x20 swap4  // [solution_addr, 0x1c, 0x04, 0x00, 0x20]
    gas staticcall             // [success]

    // Revert if call failed.
    ASSERT()                   // []

    // Store result on the stack
    0x00 mload                 // [owner]

    // Return stack:              [owner]
}

/// @dev Generates a challenge specific to the solution_addr
#define macro GEN_SEED() = takes (0) returns (1) {
    // This should be fairly difficult to exploit on arbitrum
    // due to the single sequencer. If someone manages it,
    // all power to them.

    number 0x20 mstore         // []
    dup1 blockhash 0x40 mstore // []
    caller 0x60 mstore         // []
    0x60 0x20 sha3             // [random_seed]
}

/// @dev Checks if a solution to the optimization challenge is valid
#define macro VALIDATE_SOLUTION() = takes (2) {
    // Input stack:               [word, solution]

    // Unpack solution
    // abi.encodePacked(evenSum, oddSum)
    swap1 dup1                 // [solution, solution, word]
    0x80 shl 0x80 shr          // [odd_sum, solution, word]
    swap1                      // [solution, odd_sum, word]
    0x80 shr                   // [even_sum, odd_sum, word]
    swap2                      // [word, odd_sum, even_sum]
    
    // Intentionally not optimal- don't want to give a great solution
    // away in the runtime code ;)

    0x00 dup1 dup1             // [0x00, 0x00, 0x00, word, odd_sum, even_sum]
    swap3                      // [word, index, odd_acc, even_acc, odd_sum, even_sum]
    validate_loop:
        dup1 0xFF and          // [word & 0xFF, word, index, odd_acc, even_acc, odd_sum, even_sum]
        0x02 dup2              // [word & 0xFF, 0x02, word & 0xFF, word, index, odd_acc, even_acc, odd_sum, even_sum]
        mod iszero             // [(word & 0xFF) % 0x02 == 0, word & 0xFF, word, index, odd_acc, even_acc, odd_sum, even_sum]

        // Increase even accumulator
        dup2 dup2 mul          // [even_val, (word & 0xFF) % 0x02 == 0, word & 0xFF, word, index, odd_acc, even_acc, odd_sum, even_sum]
        dup7 add               // [new_even_acc, (word & 0xFF) % 0x02 == 0, word & 0xFF, word, index, odd_acc, even_acc, odd_sum, even_sum]
        swap6 pop              // [(word & 0xFF) % 0x02 == 0, word & 0xFF, word, index, odd_acc, even_acc, odd_sum, even_sum]

        // Increase odd accumulator
        iszero mul             // [odd_val, word, index, odd_acc, even_acc, odd_sum, even_sum]
        dup4 add               // [new_odd_acc, word, index, odd_acc, even_acc, odd_sum, even_sum]
        swap3 pop              // [word, index, odd_acc, even_acc, odd_sum, even_sum]

        // Increase index and shift word right
        dup2 0x01 add          // [index + 1, word, index, odd_acc, even_acc, odd_sum, even_sum]
        swap2 pop              // [word, index, odd_acc, even_acc, odd_sum, even_sum]
        0x08 shr               // [word >> 0x08, index, odd_acc, even_acc, odd_sum, even_sum]

        0x20 dup3 lt           // [index < 0x20, word >> 0x08, index, odd_acc, even_acc, odd_sum, even_sum]
        validate_loop jumpi    // [word, index, odd_acc, even_acc, odd_sum, even_sum]

    pop pop swap3              // [even_sum, even_acc, odd_sum, odd_acc]
    eq ASSERT()                // [odd_sum, odd_acc]
    eq ASSERT()                // []
}

////////////////////////////////////////////////////////////////
//                         HONEYPOTS                          //
////////////////////////////////////////////////////////////////

/// @dev Basically a noop, random mulDivDown call with calldata as the denominator.
#define macro HONEYPOT_0() = {
    // Input stack:               [cd]

    0xa57b3d3e                 // [0xa57b3d3e, cd]
    0x957f47157a               // [0x957f47157a, 0xa57b3d3e, cd]
    MUL_DIV_DOWN(fail)         // [0x957f47157a * 0xa57b3d3e / cd]

    0x00 mstore                // []
    0x20 0x00 return
}

/// @dev Creates an infinite loop on itself, will run out of gas.
#define macro HONEYPOT_1() = {
    // Input stack:               [cd]

    0x01 0x08 shl              // [0x0100, cd]
    returndatasize add         // [0x0100 + returndatasize, cd]
    chainid and                // [(0x1000 + returndatasize) & chainid, cd]

    dispatch_1 jump            // [(0x1000 + returndatasize) & chainid, cd]

    // Unnecessary
    stop
}

/// @dev Another noop
#define macro HONEYPOT_2() = {
    // Input stack:               [cd]

    SIN()                      // [sin(cd)]
    stop
    SQRT()
}

/// @dev Retrieves the number of set bits in calldata[4:36]
#define macro HONEYPOT_4() = {
    // Input stack:               [cd]
    POP_COUNT()

    // Minimal bytecode to return the caller's address
    0x600480600E6000396000F3306000F3
    0x00 mstore                 // []
    0x0f                        // [size]
    0x00                        // [offset, size]
    0x00                        // [value, offset, size]
    create                      // [deployed_addr]

    // Return nothing
    0x00 mstore                // []
    0x20 0x00 return
}
